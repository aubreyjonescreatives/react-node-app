[{"C:\\Users\\Aubrey\\Desktop\\cards\\src\\reportWebVitals.js":"1","C:\\Users\\Aubrey\\Desktop\\cards\\src\\DeckofCards.js":"2","C:\\Users\\Aubrey\\Desktop\\cards\\src\\App.js":"3","C:\\Users\\Aubrey\\Desktop\\cards\\src\\index.js":"4","C:\\Users\\Aubrey\\Desktop\\cards\\src\\TopNavigation.js":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":9358,"mtime":1616667359703,"results":"8","hashOfConfig":"7"},{"size":366,"mtime":1616546331557,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"7"},{"size":995,"mtime":1616546179796,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pg2xmp",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\Aubrey\\Desktop\\cards\\src\\reportWebVitals.js",[],"C:\\Users\\Aubrey\\Desktop\\cards\\src\\DeckofCards.js",["24","25"],"import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios'\r\nimport {Card, IconButton, CardMedia, Typography, Container, \r\n    Dialog, Button, DialogTitle, DialogContent, DialogContentText, \r\n    DialogActions, TextField, Box} from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleIcon from '@material-ui/icons/Add';\r\nimport LazyLoad from 'react-lazyload'\r\nimport './css/cardStyles.css'\r\nimport { Formik } from 'formik' \r\nimport * as Yup from 'yup'\r\n\r\n\r\nconst Loading = () => (\r\n<div>\r\n<h4>Loading...</h4>\r\n\r\n</div>\r\n\r\n\r\n)\r\n\r\n\r\nconst DeckofCards = () => {\r\n\r\n\r\nconst [deckData, setDeckData] = useState([])\r\n\r\nconst [restartdeckData, restartsetDeckData] = useState([])\r\n\r\n\r\nconst [deleteOpen, setDeleteOpen] = useState(false)\r\nconst [selectedCard, setSelectedCard] = useState(null)\r\nconst [editOpen, setEditOpen] = useState(false)\r\n\r\n\r\n\r\nconst fetchCards = async () => {\r\n    try {\r\n    const cards = await axios.get(`http://localhost:5000/card/`)\r\n    setDeckData(cards.data)\r\n    console.log(cards.data)\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    }\r\n    \r\n    \r\n    \r\n    useEffect(() => {\r\n        fetchCards()\r\n       \r\n    }, [])\r\n\r\n    const handleClickEditOpen = (card) => {\r\n        setSelectedCard(card.card) \r\n        setEditOpen(true)\r\n    }\r\n\r\n    const handleCloseEdit = () => {\r\n        setEditOpen(false)\r\n    }\r\n    \r\nconst handleUpdate = async (values) => {\r\n    try {\r\n        const result = await axios.put(`http://localhost:5000/card/update`, {\r\n            data: {\r\n                id: values._id,\r\n                code: values.code, \r\n                image: values.image, \r\n                value: values.value, \r\n                suit: values.suit\r\n            },\r\n        })\r\n        if (result.status === 200) {\r\n            fetchCards()\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\nconst handleClickDeleteOpen = (card) => {\r\n    console.log('You clicked to delete')\r\n    console.log(card.card._id)\r\n    setSelectedCard(card.card)\r\n    setDeleteOpen(true)\r\n}\r\n\r\nconst handleCloseDelete = () => {\r\n    setDeleteOpen(false)\r\n}\r\n\r\nconst handleDelete = async () => {\r\n    setDeleteOpen(false)\r\n    console.log(selectedCard._id)\r\n    try {\r\n        await axios.delete(`http://localhost:5000/card/delete`, { \r\n        data: {   \r\n        cardId: selectedCard._id\r\n        }\r\n    })\r\n    fetchCards()\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\n\r\nfunction hintButton() {\r\n    document.getElementById('gameHints').textContent = 'Hint: Add Cards or Press Restart'\r\n    let hints = document.getElementById('gameHints') \r\n    if (hints.style.display === 'none') {\r\n        hints.style.display = 'block'; \r\n    } else {\r\n        hints.style.display = 'none'\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction restartButton() {\r\n\r\n    \r\nconst fetchCardsRestart = async () => {\r\n    try {\r\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/new/draw/?count=52`)\r\n    restartsetDeckData(cards.data)\r\n    console.log(cards.data)\r\n    document.getElementById('restartGame').textContent = cards.data\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    \r\n    }\r\n\r\n    fetchCardsRestart()\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <div className=\"main-1\">\r\n     <h1>Card Sorting</h1>\r\n     <h2>How Fast Can You Make a Full Suit?</h2>\r\n    \r\n    <button className=\"buttonHint\" onClick={hintButton}>Show Hint</button>\r\n    <button className=\"buttonHint\" onClick={restartButton}>Restart</button>\r\n     <h2 id=\"gameHints\"></h2>\r\n     <div></div>\r\n     <form>\r\n         <TextField placeholder='Search' />\r\n         <IconButton aria-label='search'>\r\n             <SearchIcon />\r\n             </IconButton>\r\n             <IconButton aria-label='add card'>\r\n                <AddCircleIcon/>\r\n             </IconButton>\r\n     </form>\r\n\r\n\r\n\r\n\r\n    {deckData.map((card) => {\r\n     return (\r\n    <Card className=\"card-container\" key={card._id}>\r\n    <LazyLoad placeholder={<Loading></Loading>}> \r\n     <CardMedia className=\"CardMedia\"\r\n     component=\"img\"\r\n     alt={'Card'}\r\n     image={card.image}\r\n     >\r\n \r\n     </CardMedia>\r\n     <Typography>{card.value}</Typography>\r\n     <Typography>OF</Typography>\r\n     <Typography>{card.suit}</Typography>\r\n     <IconButton aria-label='edit' onClick={() => handleClickEditOpen({ card })}> <EditIcon/></IconButton>\r\n     <IconButton aria-label='delete' onClick={() => handleClickDeleteOpen({card})}><DeleteIcon/></IconButton>\r\n     </LazyLoad>\r\n     </Card>\r\n    \r\n    )\r\n    \r\n     })\r\n     }\r\n    <div id=\"restartGame\"></div>\r\n     \r\n     <Dialog \r\n    open={editOpen}\r\n    onClose={handleCloseEdit}\r\n    aria-labelledby='edit-dial'>\r\n    <Formik\r\n    initialValues={{\r\n        id: selectedCard?._id, \r\n        code: selectedCard?.code, \r\n        image: selectedCard?.image, \r\n        value: selectedCard?.value, \r\n        suit: selectedCard?.suit \r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n        id: Yup.string('Enter Card ID').required(\r\n            'Card ID is required', \r\n        ),\r\n        code: Yup.string('Enter card code').required(\r\n            'Card code is required',\r\n        ),\r\n        image: Yup.string('Image URL'), \r\n        value: Yup.string('Value'), \r\n        suit: Yup.string('Suit'), \r\n    })}\r\n    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {\r\n        try {\r\n            await handleUpdate(values) \r\n            handleCloseEdit()\r\n        }   catch (err) {\r\n            console.error(err)\r\n            setStatus({ success: false })\r\n            setErrors({ submit: err.message })\r\n            setSubmitting(false)\r\n        }\r\n    }}\r\n    >\r\n    {({\r\n        values, \r\n        errors, \r\n        touched, \r\n        handleChange, \r\n        handleBlur, \r\n        handleSubmit, \r\n        isSubmitting,\r\n    }) => (\r\n        <form \r\n        noValidate \r\n        autoComplete='off' \r\n        onSubmit={handleSubmit}\r\n        >\r\n         <DialogTitle id=\"edit-dial\">Edit Card</DialogTitle>   \r\n         <DialogContent>\r\n             <DialogContentText>\r\n                 Edit Information for this Card: \r\n             </DialogContentText>\r\n             <TextField \r\n            autoFocus \r\n            id=\"id\"\r\n            name=\"id\"\r\n            label=\"Card ID\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values._id}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched._id && errors._id)} \r\n            helperText={touched._id && errors._id} \r\n            />\r\n            <TextField \r\n            autoFocus \r\n            id=\"code\"\r\n            name=\"code\"\r\n            label=\"Card Code\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.code}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.code && errors.code)} \r\n            helperText={touched.code && errors.code} \r\n            />\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"image\"\r\n            name=\"image\"\r\n            label=\"Card Image\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.image}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.image && errors.image)} \r\n            helperText={touched.image && errors.image} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"value\"\r\n            name=\"value\"\r\n            label=\"Card Value\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.value}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.value && errors.value)} \r\n            helperText={touched.value && errors.value} \r\n\r\n\r\n                />\r\n            </Box>\r\n\r\n\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"suit\"\r\n            name=\"suit\"\r\n            label=\"Card Suit\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.suit}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.suit && errors.suit)} \r\n            helperText={touched.suit && errors.suit} \r\n                />\r\n            </Box>\r\n         </DialogContent>\r\n         <DialogActions>\r\n             <Button onClick={handleCloseEdit}>Cancel</Button>\r\n             <Button type='submit'>Save</Button>\r\n         </DialogActions>\r\n       \r\n        </form>\r\n    )}\r\n\r\n\r\n\r\n    </Formik>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n\r\n    <form>\r\n     <Container>\r\n        <Dialog open={deleteOpen} onClose={handleCloseDelete}>\r\n        <DialogTitle>Delete Card</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n                Are you sure you want to delete this card?\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseDelete}>Cancel</Button>\r\n            <Button onClick={handleDelete}>Delete</Button>\r\n        </DialogActions>\r\n        </Dialog>\r\n     </Container>\r\n\r\n\r\n     </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n   </div>\r\n\r\n)}\r\n  \r\nexport default DeckofCards ","C:\\Users\\Aubrey\\Desktop\\cards\\src\\App.js",["26"],"C:\\Users\\Aubrey\\Desktop\\cards\\src\\index.js",[],"C:\\Users\\Aubrey\\Desktop\\cards\\src\\TopNavigation.js",["27"],"import React from 'react';\r\nimport './css/cardStyles.css'\r\nimport { AppBar, Toolbar, IconButton, CardMedia, Typography, Button } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport logo from './assets/images/chaoticneutralgameslogo.png'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TopNavigation() {\r\n \r\n\r\nreturn (\r\n  \r\n  <div>\r\n      <AppBar position=\"static\">\r\n        \r\n        <Toolbar>\r\n        <Button>\r\n         <CardMedia\r\n          component=\"img\"\r\n          alt={'Card'}\r\n          image={logo}\r\n          className=\"menuLogo\">\r\n\r\n         </CardMedia>\r\n         </Button>\r\n         <Typography>Your Games</Typography>\r\n         <Typography>Your Stats</Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\"><MenuIcon /></IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default TopNavigation; \r\n  ",{"ruleId":"28","severity":1,"message":"29","line":31,"column":8,"nodeType":"30","messageId":"31","endLine":31,"endColumn":23},{"ruleId":"32","severity":1,"message":"33","line":159,"column":6,"nodeType":"34","endLine":159,"endColumn":25},{"ruleId":"28","severity":1,"message":"35","line":2,"column":10,"nodeType":"30","messageId":"31","endLine":2,"endColumn":15},{"ruleId":"28","severity":1,"message":"36","line":6,"column":10,"nodeType":"30","messageId":"31","endLine":6,"endColumn":25},"no-unused-vars","'restartdeckData' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'Route' is defined but never used.","'FontAwesomeIcon' is defined but never used."]